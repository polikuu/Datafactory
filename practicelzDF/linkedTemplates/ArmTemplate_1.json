{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "practicelzDF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/OLTP')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase3",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/movie_genre_junction_silver')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MovieBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Movie"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "result/silver/junction",
						"container": "etloutput"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OLTPToOLAP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Calculate ETL Cutoff Time",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "TargetETLCutoffTime",
							"value": {
								"value": "@pipeline().parameters.inputDate",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LookupTableName",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "OLTP",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": "dbo",
									"TableName": "TableName"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Ensure DateDim includes current year",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Calculate ETL Cutoff Time",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Integration].[PopulateDateDimensionForYear]",
							"storedProcedureParameters": {
								"YearNumber": {
									"value": "2022",
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Integration",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ForEachTable",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupTableName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupTableName').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Truncate Table_Staging",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "LookupLineageKey",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "DW",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "DELETE FROM Integration.@{item().Name}_Staging",
													"type": "Expression"
												}
											}
										]
									}
								},
								{
									"name": "LookupLineageKey",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[Integration].[GetLineageKey]",
											"storedProcedureParameters": {
												"NewCutoffTime": {
													"type": "DateTime",
													"value": {
														"value": "@variables('TargetETLCutoffTime')",
														"type": "Expression"
													}
												},
												"TableName": {
													"type": "String",
													"value": {
														"value": "@{item().Name}",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "Integration",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "LookupETLCutoffTime",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Truncate Table_Staging",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[Integration].[GetLastETLCutoffTime]",
											"storedProcedureParameters": {
												"TableName": {
													"type": "String",
													"value": {
														"value": "@{item().name}",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "Integration",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Set LastCutoffTime",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "LookupETLCutoffTime",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "LastETLCutoffTime",
										"value": {
											"value": "@{activity('LookupETLCutoffTime').output.firstRow.CutoffTime}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "ExtractUpdatedDataToIntegration",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set LastCutoffTime",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": {
												"value": "[[Integration].[Get@{item().Name}Updates]",
												"type": "Expression"
											},
											"storedProcedureParameters": {
												"LastCutoff": {
													"type": "DateTime",
													"value": {
														"value": "@variables('LastETLCutoffTime')",
														"type": "Expression"
													}
												},
												"NewCutoff": {
													"type": "DateTime",
													"value": {
														"value": "@variables('TargetETLCutoffTime')",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ODS",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DW",
											"type": "DatasetReference",
											"parameters": {
												"SchemaName": "Integration",
												"Tablename": "@{item().Name}_Staging"
											}
										}
									]
								},
								{
									"name": "MigrateStagedTableData",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "ExtractUpdatedDataToIntegration",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "[[Integration].[MigrateStaged@{item().Name}Data]",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "DW",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"inputDate": {
						"type": "string"
					}
				},
				"variables": {
					"TargetETLCutoffTime": {
						"type": "String"
					},
					"LineageKey": {
						"type": "String"
					},
					"TableName": {
						"type": "String"
					},
					"LastETLCutoffTime": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OLTP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Bronze_To_Silver')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Movie_Bronze",
								"type": "DatasetReference"
							},
							"name": "ingestBronze"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Genres_silver",
								"type": "DatasetReference"
							},
							"name": "saveSilverGenres"
						},
						{
							"dataset": {
								"referenceName": "Movie_silver",
								"type": "DatasetReference"
							},
							"name": "saveSilverMovie"
						},
						{
							"dataset": {
								"referenceName": "Language_silver",
								"type": "DatasetReference"
							},
							"name": "saveSilverLanguage"
						},
						{
							"dataset": {
								"referenceName": "Movie_Bronze",
								"type": "DatasetReference"
							},
							"name": "saveBronzeMoive",
							"description": "save Bronze table for clean movie dataset (loaded)"
						},
						{
							"dataset": {
								"referenceName": "movie_genre_junction_silver",
								"type": "DatasetReference"
							},
							"name": "saveSilverJunction"
						}
					],
					"transformations": [
						{
							"name": "bronzeDF",
							"description": "SelectValueColumn"
						},
						{
							"name": "bronzeAgumentedDFMovie",
							"description": "Creating/updating the columns 'value, Id, Budget, Revenue, RunTime, Price, Title, Overview, Tagline, Imdburl, TmdbUrl, PosterUrl, BackdropUrl, ReleaseDate, p_CreatedDate, UpdatedDate, UpdatedBy, CreatedBy, Genres, Language_Id'.\n\nUpdating the minimum of Budget to 100,000"
						},
						{
							"name": "parseGenres"
						},
						{
							"name": "DistinctRowGenres"
						},
						{
							"name": "filterNew"
						},
						{
							"name": "split"
						},
						{
							"name": "excludeValue"
						},
						{
							"name": "selectLanguage"
						},
						{
							"name": "selectGenres"
						},
						{
							"name": "createKey"
						},
						{
							"name": "DistinctRowLanguage"
						},
						{
							"name": "litStatusLoaded"
						},
						{
							"name": "DistinctRowMovie"
						},
						{
							"name": "litStatusQuarantined"
						},
						{
							"name": "DistinctRowMovieQ"
						},
						{
							"name": "selectValueStatus"
						},
						{
							"name": "join1"
						},
						{
							"name": "selectBronzeColumn"
						},
						{
							"name": "union1"
						},
						{
							"name": "select1"
						},
						{
							"name": "movieGenreID"
						}
					],
					"scriptLines": [
						"source(output(",
						"          value as (BackdropUrl as string, Budget as double, CreatedBy as string, CreatedDate as string, Id as short, ImdbUrl as string, OriginalLanguage as string, Overview as string, PosterUrl as string, Price as double, ReleaseDate as string, Revenue as double, RunTime as short, Tagline as string, Title as string, TmdbUrl as string, UpdatedBy as string, UpdatedDate as string, genres as (id as short, name as string)[]),",
						"          datasource as string,",
						"          ingesttime as timestamp,",
						"          status as string,",
						"          ingestdate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> ingestBronze",
						"filterNew select(mapColumn(",
						"          value",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> bronzeDF",
						"select1 derive(value = value,",
						"          Budget = case(Budget < 100000, 100000, toInteger(value.Budget)),",
						"          ReleaseDate = toDate(ReleaseDate),",
						"          CreatedDate = toDate(CreatedDate),",
						"          Language_Id = 1) ~> bronzeAgumentedDFMovie",
						"selectGenres select(mapColumn(",
						"          Id = genres[1].id,",
						"          Name = genres[1].name",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> parseGenres",
						"parseGenres aggregate(groupBy(Id),",
						"     each(match(name!=\"Id\"), $$ = first($$))) ~> DistinctRowGenres",
						"ingestBronze filter(status == \"new\") ~> filterNew",
						"bronzeAgumentedDFMovie split(RunTime >= 0,",
						"     disjoint: false) ~> split@(silverMovieClean, silverMovieQuarantined)",
						"DistinctRowMovie select(mapColumn(",
						"          Id,",
						"          Budget,",
						"          Revenue,",
						"          RunTime,",
						"          Price,",
						"          Title,",
						"          Overview,",
						"          Tagline,",
						"          ImdbUrl,",
						"          TmdbUrl,",
						"          PosterUrl,",
						"          BackdropUrl,",
						"          ReleaseDate,",
						"          p_CreatedDate = CreatedDate,",
						"          UpdatedDate,",
						"          UpdatedBy,",
						"          CreatedBy,",
						"          Genres_Id = genres[1].id,",
						"          Language_Id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> excludeValue",
						"bronzeDF select(mapColumn(",
						"          Language = value.OriginalLanguage",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectLanguage",
						"bronzeDF select(mapColumn(",
						"          genres = value.genres",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectGenres",
						"selectLanguage window(over(Language),",
						"     asc(Language, true),",
						"     Id = rank()) ~> createKey",
						"createKey aggregate(groupBy(Id),",
						"     each(match(name!=\"Id\"), $$ = first($$))) ~> DistinctRowLanguage",
						"DistinctRowMovie derive(status = \"loaded\") ~> litStatusLoaded",
						"split@silverMovieClean aggregate(groupBy(Id),",
						"     each(match(name!=\"Id\"), $$ = min($$))) ~> DistinctRowMovie",
						"DistinctRowMovieQ derive(status = \"quarantined\") ~> litStatusQuarantined",
						"split@silverMovieQuarantined aggregate(groupBy(Id),",
						"     each(match(name!=\"Id\"), $$ = first($$))) ~> DistinctRowMovieQ",
						"union1 select(mapColumn(",
						"          value,",
						"          status",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectValueStatus",
						"selectValueStatus, ingestBronze join(selectValueStatus@value.Id == ingestBronze@value.Id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          value = selectValueStatus@value,",
						"          datasource,",
						"          ingesttime,",
						"          status = selectValueStatus@status,",
						"          ingestdate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectBronzeColumn",
						"litStatusLoaded, litStatusQuarantined union(byName: false)~> union1",
						"bronzeDF select(mapColumn(",
						"          value,",
						"          BackdropUrl = value.BackdropUrl,",
						"          Budget = value.Budget,",
						"          CreatedBy = value.CreatedBy,",
						"          CreatedDate = value.CreatedDate,",
						"          Id = value.Id,",
						"          ImdbUrl = value.ImdbUrl,",
						"          Overview = value.Overview,",
						"          PosterUrl = value.PosterUrl,",
						"          Price = value.Price,",
						"          ReleaseDate = value.ReleaseDate,",
						"          Revenue = value.Revenue,",
						"          RunTime = value.RunTime,",
						"          Tagline = value.Tagline,",
						"          Title = value.Title,",
						"          TmdbUrl = value.TmdbUrl,",
						"          UpdatedBy = value.UpdatedBy,",
						"          UpdatedDate = value.UpdatedDate,",
						"          genres = value.genres",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"DistinctRowMovie select(mapColumn(",
						"          Movie_Id = value.Id,",
						"          Genres_Id = genres[1].id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> movieGenreID",
						"DistinctRowGenres sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     partitionBy('hash', 1),",
						"     preCommands: ['rm -f /result/silver/Genres/*'],",
						"     postCommands: []) ~> saveSilverGenres",
						"excludeValue sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     partitionBy('hash', 1),",
						"     preCommands: ['rm -f /result/silver/Movie/*'],",
						"     postCommands: []) ~> saveSilverMovie",
						"DistinctRowLanguage sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     partitionBy('hash', 1),",
						"     preCommands: ['rm -f /result/silver/Language/*'],",
						"     postCommands: []) ~> saveSilverLanguage",
						"selectBronzeColumn sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     format: 'parquet',",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 3,",
						"     partitionBy('hash', 1),",
						"     preCommands: [],",
						"     postCommands: []) ~> saveBronzeMoive",
						"movieGenreID sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> saveSilverJunction"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/movie_genre_junction_silver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimEmployeeLoader2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeeFiles1",
								"type": "DatasetReference"
							},
							"name": "Employees1",
							"description": " Source employees file, changes every day"
						},
						{
							"dataset": {
								"referenceName": "DimEmp",
								"type": "DatasetReference"
							},
							"name": "DimEmployees",
							"description": "Current rows in DimEmployees DW table"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DimEmp",
								"type": "DatasetReference"
							},
							"name": "sinkNew",
							"description": " "
						},
						{
							"dataset": {
								"referenceName": "DimEmp",
								"type": "DatasetReference"
							},
							"name": "sinkUpdates",
							"description": " "
						},
						{
							"dataset": {
								"referenceName": "DimEmp",
								"type": "DatasetReference"
							},
							"name": "sinkInactive",
							"description": " Age out old rows"
						}
					],
					"transformations": [
						{
							"name": "TypeConversions"
						},
						{
							"name": "TypeConversionsAndSetAttrs"
						},
						{
							"name": "LookupIDs"
						},
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "checkForChanges"
						},
						{
							"name": "SetAttrsForNew"
						},
						{
							"name": "SetAttrsInactive",
							"description": "make iscurrent 0"
						},
						{
							"name": "SetAttrsUpdate"
						},
						{
							"name": "NormNames"
						},
						{
							"name": "InactiveFields"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "NullFilter",
							"description": "Filter out NULLs from source file"
						},
						{
							"name": "NameNorm2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpID as string,",
						"          Region as string,",
						"          Status as string,",
						"          Function as string,",
						"          Level as string,",
						"          Role as string,",
						"          StartDate as string,",
						"          EndDate as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true,",
						"     wildcardPaths:['SampleData/Emps/today/*.csv']) ~> Employees1",
						"source(output(",
						"          EmpID as integer,",
						"          surrogatekey as string,",
						"          Region as string,",
						"          Status as string,",
						"          EmpFunction as string,",
						"          Level as string,",
						"          Role as string,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          iscurrent as integer,",
						"          processtime as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimEmployees",
						"DimEmployees derive(EmpID = toInteger(EmpID)) ~> TypeConversions",
						"NullFilter derive(EmpID = toInteger(EmpID),",
						"          StartDate = toDate(StartDate,'MM/dd/yyyy'),",
						"          EndDate = toDate(EndDate,'MM/dd/yyyy'),",
						"          processtime = currentTimestamp()) ~> TypeConversionsAndSetAttrs",
						"TypeConversionsAndSetAttrs, TypeConversions lookup(TypeConversionsAndSetAttrs@EmpID == TypeConversions@EmpID,",
						"     multiple: true,",
						"     broadcast: 'auto')~> LookupIDs",
						"NormNames split(isNull(iscurrent),",
						"     disjoint: false) ~> ConditionalSplit1@(NewRow, CheckForUpdates)",
						"NameNorm2, TypeConversions exists(NameNorm2@EmpID == TypeConversions@EmpID,",
						"     negate:false,",
						"     broadcast: 'auto')~> checkForChanges",
						"ConditionalSplit1@NewRow derive(iscurrent = 1,",
						"          surrogatekey = toString(crc32(EmpID,EmpFunction))) ~> SetAttrsForNew",
						"checkForChanges derive(iscurrent = 0) ~> SetAttrsInactive",
						"checkForChanges derive(iscurrent = 1) ~> SetAttrsUpdate",
						"LookupIDs select(mapColumn(",
						"          EmpID = TypeConversionsAndSetAttrs@EmpID,",
						"          Region = Employees1@Region,",
						"          Status = Employees1@Status,",
						"          Level = Employees1@Level,",
						"          Role = Employees1@Role,",
						"          StartDate = TypeConversionsAndSetAttrs@StartDate,",
						"          EndDate = TypeConversionsAndSetAttrs@EndDate,",
						"          EmpFunction = Function,",
						"          iscurrent,",
						"          processtime = TypeConversionsAndSetAttrs@processtime,",
						"          surrogatekey",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> NormNames",
						"SetAttrsInactive select(mapColumn(",
						"          EmpID,",
						"          Status,",
						"          EndDate,",
						"          iscurrent,",
						"          processtime",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> InactiveFields",
						"InactiveFields alterRow(updateIf(true())) ~> AlterRow1",
						"Employees1 filter(!isNull(EmpID)) ~> NullFilter",
						"ConditionalSplit1@CheckForUpdates select(mapColumn(",
						"          EmpID,",
						"          Region,",
						"          Status,",
						"          Level,",
						"          Role,",
						"          StartDate,",
						"          EndDate,",
						"          EmpFunction,",
						"          iscurrent,",
						"          processtime,",
						"          surrogatekey",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> NameNorm2",
						"SetAttrsForNew sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmpID as integer,",
						"          surrogatekey as string,",
						"          Region as string,",
						"          Status as string,",
						"          EmpFunction as string,",
						"          Level as string,",
						"          Role as string,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          iscurrent as integer,",
						"          processtime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     batchSize: 50,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     partitionBy('roundRobin', 4)) ~> sinkNew",
						"SetAttrsUpdate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmpID as integer,",
						"          surrogatekey as string,",
						"          Region as string,",
						"          Status as string,",
						"          EmpFunction as string,",
						"          Level as string,",
						"          Role as string,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          iscurrent as integer,",
						"          processtime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     batchSize: 50,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     partitionBy('roundRobin', 4)) ~> sinkUpdates",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmpID as integer,",
						"          surrogatekey as string,",
						"          Region as string,",
						"          Status as string,",
						"          EmpFunction as string,",
						"          Level as string,",
						"          Role as string,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          iscurrent as integer,",
						"          processtime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['EmpID'],",
						"     format: 'table',",
						"     batchSize: 50,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          EmpID,",
						"          EndDate,",
						"          iscurrent,",
						"          processtime",
						"     ),",
						"     partitionBy('roundRobin', 4)) ~> sinkInactive"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Raw_To_Bronze')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Movie_json",
								"type": "DatasetReference"
							},
							"name": "IngestRawMovie"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Movie_Bronze",
								"type": "DatasetReference"
							},
							"name": "SaveToBronze",
							"rejectedDataLinkedService": {
								"referenceName": "MovieBlobStorage",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "flattenValues"
						},
						{
							"name": "MetaData"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movie as (Id as integer, Title as string, Overview as string, Tagline as string, Budget as double, Revenue as double, ImdbUrl as string, TmdbUrl as string, PosterUrl as string, BackdropUrl as string, OriginalLanguage as string, ReleaseDate as string, RunTime as integer, Price as double, CreatedDate as string, UpdatedDate as string, UpdatedBy as string, CreatedBy as string, genres as (id as integer, name as string)[])[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> IngestRawMovie",
						"IngestRawMovie foldDown(unroll(movie, movie),",
						"     mapColumn(",
						"          value = movie",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenValues",
						"flattenValues derive(value = value,",
						"          datasource = \"antraMovie\",",
						"          ingesttime = currentTimestamp(),",
						"          status = \"New\",",
						"          ingestdate = currentDate()) ~> MetaData",
						"MetaData sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     format: 'parquet',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     partitionBy('hash', 1)) ~> SaveToBronze"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SilverUpdate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Movie_Bronze",
								"type": "DatasetReference"
							},
							"name": "IngestBronzeMovie"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Movie_silver",
								"type": "DatasetReference"
							},
							"name": "saveSilverMovie"
						},
						{
							"dataset": {
								"referenceName": "Movie_Bronze",
								"type": "DatasetReference"
							},
							"name": "saveBronzeMovie"
						}
					],
					"transformations": [
						{
							"name": "filterQuarantined"
						},
						{
							"name": "selectValue"
						},
						{
							"name": "absRunTime"
						},
						{
							"name": "excludeValue"
						},
						{
							"name": "DistinctRows"
						},
						{
							"name": "litStatusLoaded"
						},
						{
							"name": "selectValueStatus"
						},
						{
							"name": "join1"
						},
						{
							"name": "selectBronzeColumn"
						},
						{
							"name": "ChangeValueToString"
						},
						{
							"name": "addLanguageID"
						}
					],
					"scriptLines": [
						"source(output(",
						"          value as (BackdropUrl as string, Budget as double, CreatedBy as string, CreatedDate as string, Id as short, ImdbUrl as string, OriginalLanguage as string, Overview as string, PosterUrl as string, Price as double, ReleaseDate as string, Revenue as double, RunTime as short, Tagline as string, Title as string, TmdbUrl as string, UpdatedBy as string, UpdatedDate as string, genres as (id as short, name as string)[]),",
						"          datasource as string,",
						"          ingesttime as timestamp,",
						"          status as string,",
						"          ingestdate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> IngestBronzeMovie",
						"IngestBronzeMovie filter(status == \"quarantined\") ~> filterQuarantined",
						"filterQuarantined select(mapColumn(",
						"          value,",
						"          Id = value.Id,",
						"          Budget = value.Budget,",
						"          Revenue = value.Revenue,",
						"          RunTime = value.RunTime,",
						"          Price = value.Price,",
						"          Title = value.Title,",
						"          Overview = value.Overview,",
						"          Tagline = value.Tagline,",
						"          ImdbUrl = value.ImdbUrl,",
						"          TmdbUrl = value.TmdbUrl,",
						"          PosterUrl = value.PosterUrl,",
						"          BackdropUrl = value.BackdropUrl,",
						"          ReleaseDate = value.ReleaseDate,",
						"          CreatedDate = value.CreatedDate,",
						"          UpdatedDate = value.UpdatedDate,",
						"          UpdatedBy = value.UpdatedBy,",
						"          CreatedBy = value.CreatedBy,",
						"          genres = value.genres,",
						"          OriginalLanguage = value.OriginalLanguage",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectValue",
						"selectValue derive(RunTime = abs(RunTime)) ~> absRunTime",
						"addLanguageID select(mapColumn(",
						"          Id,",
						"          Budget,",
						"          Revenue,",
						"          RunTime,",
						"          Price,",
						"          Title,",
						"          Overview,",
						"          Tagline,",
						"          ImdbUrl,",
						"          TmdbUrl,",
						"          PosterUrl,",
						"          BackdropUrl,",
						"          ReleaseDate,",
						"          CreatedDate,",
						"          UpdatedDate,",
						"          UpdatedBy,",
						"          CreatedBy,",
						"          Genres_Id = genres[1].id,",
						"          Language_Id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> excludeValue",
						"absRunTime aggregate(groupBy(Id),",
						"     each(match(name!=\"Id\"), $$ = first($$))) ~> DistinctRows",
						"DistinctRows derive(status = \"loaded\") ~> litStatusLoaded",
						"litStatusLoaded select(mapColumn(",
						"          value,",
						"          status",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectValueStatus",
						"selectValueStatus, IngestBronzeMovie join(selectValueStatus@value.Id == IngestBronzeMovie@value.Id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          value = selectValueStatus@value,",
						"          datasource,",
						"          ingesttime,",
						"          ingestdate,",
						"          status = selectValueStatus@status",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectBronzeColumn",
						"selectBronzeColumn derive(value = toString(value)) ~> ChangeValueToString",
						"DistinctRows derive(Language_Id = 1) ~> addLanguageID",
						"excludeValue sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     partitionBy('hash', 1),",
						"     preCommands: [],",
						"     postCommands: []) ~> saveSilverMovie",
						"ChangeValueToString sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     partitionBy('hash', 1),",
						"     preCommands: [],",
						"     postCommands: []) ~> saveBronzeMovie"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimEmployeePipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LoadDimEmployee",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DimEmployeeLoader2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Employees1": {},
									"DimEmployees": {},
									"sinkNew": {},
									"sinkUpdates": {},
									"sinkInactive": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Demos"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DimEmployeeLoader2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/QuarantinedBronzeToSilver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SilverUpdate",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SilverUpdate",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"IngestBronzeMovie": {},
									"saveSilverMovie": {},
									"saveBronzeMovie": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SilverUpdate')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RawToBronzeToSilver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Raw_To_Bronze",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Raw_To_Bronze",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"IngestRawMovie": {},
									"SaveToBronze": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Bronze_To_Silver",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Raw_To_Bronze",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Bronze_To_Silver",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ingestBronze": {},
									"saveSilverGenres": {},
									"saveSilverMovie": {},
									"saveSilverLanguage": {},
									"saveBronzeMoive": {},
									"saveSilverJunction": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-30T09:09:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Raw_To_Bronze')]",
				"[concat(variables('factoryId'), '/dataflows/Bronze_To_Silver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/movies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RawToBronzeToSilver",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "RawToBronzeToSilver",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "QuarantinedBronzeToSilver",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "RawToBronzeToSilver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "QuarantinedBronzeToSilver",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/RawToBronzeToSilver')]",
				"[concat(variables('factoryId'), '/pipelines/QuarantinedBronzeToSilver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "OLTPToOLAP",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "OLTPToOLAP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inputDate": {
									"value": "@pipeline().parameters.inputDate",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "movies",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "movies",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"inputDate": {
						"type": "string",
						"defaultValue": "2022-09-01T13:45:30"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/OLTPToOLAP')]",
				"[concat(variables('factoryId'), '/pipelines/movies')]"
			]
		}
	]
}