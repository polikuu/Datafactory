{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "practicelzDF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Raw_To_Bronze')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Movie_json",
								"type": "DatasetReference"
							},
							"name": "IngestRawMovie"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Movie_Bronze",
								"type": "DatasetReference"
							},
							"name": "SaveToBronze",
							"rejectedDataLinkedService": {
								"referenceName": "MovieBlobStorage",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "flattenValues"
						},
						{
							"name": "MetaData"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movie as (Id as integer, Title as string, Overview as string, Tagline as string, Budget as double, Revenue as double, ImdbUrl as string, TmdbUrl as string, PosterUrl as string, BackdropUrl as string, OriginalLanguage as string, ReleaseDate as string, RunTime as integer, Price as double, CreatedDate as string, UpdatedDate as string, UpdatedBy as string, CreatedBy as string, genres as (id as integer, name as string)[])[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> IngestRawMovie",
						"IngestRawMovie foldDown(unroll(movie, movie),",
						"     mapColumn(",
						"          value = movie",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenValues",
						"flattenValues derive(value = value,",
						"          datasource = \"antraMovie\",",
						"          ingesttime = currentTimestamp(),",
						"          status = \"New\",",
						"          ingestdate = currentDate()) ~> MetaData",
						"MetaData sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     format: 'parquet',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     partitionBy('hash', 1)) ~> SaveToBronze"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SilverUpdate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Movie_Bronze",
								"type": "DatasetReference"
							},
							"name": "IngestBronzeMovie"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Movie_silver",
								"type": "DatasetReference"
							},
							"name": "saveSilverMovie"
						},
						{
							"dataset": {
								"referenceName": "Movie_Bronze",
								"type": "DatasetReference"
							},
							"name": "saveBronzeMovie"
						}
					],
					"transformations": [
						{
							"name": "filterQuarantined"
						},
						{
							"name": "selectValue"
						},
						{
							"name": "absRunTime"
						},
						{
							"name": "excludeValue"
						},
						{
							"name": "DistinctRows"
						},
						{
							"name": "litStatusLoaded"
						},
						{
							"name": "selectValueStatus"
						},
						{
							"name": "join1"
						},
						{
							"name": "selectBronzeColumn"
						},
						{
							"name": "ChangeValueToString"
						},
						{
							"name": "addLanguageID"
						}
					],
					"scriptLines": [
						"source(output(",
						"          value as (BackdropUrl as string, Budget as double, CreatedBy as string, CreatedDate as string, Id as short, ImdbUrl as string, OriginalLanguage as string, Overview as string, PosterUrl as string, Price as double, ReleaseDate as string, Revenue as double, RunTime as short, Tagline as string, Title as string, TmdbUrl as string, UpdatedBy as string, UpdatedDate as string, genres as (id as short, name as string)[]),",
						"          datasource as string,",
						"          ingesttime as timestamp,",
						"          status as string,",
						"          ingestdate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> IngestBronzeMovie",
						"IngestBronzeMovie filter(status == \"quarantined\") ~> filterQuarantined",
						"filterQuarantined select(mapColumn(",
						"          value,",
						"          Id = value.Id,",
						"          Budget = value.Budget,",
						"          Revenue = value.Revenue,",
						"          RunTime = value.RunTime,",
						"          Price = value.Price,",
						"          Title = value.Title,",
						"          Overview = value.Overview,",
						"          Tagline = value.Tagline,",
						"          ImdbUrl = value.ImdbUrl,",
						"          TmdbUrl = value.TmdbUrl,",
						"          PosterUrl = value.PosterUrl,",
						"          BackdropUrl = value.BackdropUrl,",
						"          ReleaseDate = value.ReleaseDate,",
						"          CreatedDate = value.CreatedDate,",
						"          UpdatedDate = value.UpdatedDate,",
						"          UpdatedBy = value.UpdatedBy,",
						"          CreatedBy = value.CreatedBy,",
						"          genres = value.genres,",
						"          OriginalLanguage = value.OriginalLanguage",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectValue",
						"selectValue derive(RunTime = abs(RunTime)) ~> absRunTime",
						"addLanguageID select(mapColumn(",
						"          Id,",
						"          Budget,",
						"          Revenue,",
						"          RunTime,",
						"          Price,",
						"          Title,",
						"          Overview,",
						"          Tagline,",
						"          ImdbUrl,",
						"          TmdbUrl,",
						"          PosterUrl,",
						"          BackdropUrl,",
						"          ReleaseDate,",
						"          CreatedDate,",
						"          UpdatedDate,",
						"          UpdatedBy,",
						"          CreatedBy,",
						"          Genres_Id = genres[1].id,",
						"          Language_Id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> excludeValue",
						"absRunTime aggregate(groupBy(Id),",
						"     each(match(name!=\"Id\"), $$ = first($$))) ~> DistinctRows",
						"DistinctRows derive(status = \"loaded\") ~> litStatusLoaded",
						"litStatusLoaded select(mapColumn(",
						"          value,",
						"          status",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectValueStatus",
						"selectValueStatus, IngestBronzeMovie join(selectValueStatus@value.Id == IngestBronzeMovie@value.Id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          value = selectValueStatus@value,",
						"          datasource,",
						"          ingesttime,",
						"          ingestdate,",
						"          status = selectValueStatus@status",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectBronzeColumn",
						"selectBronzeColumn derive(value = toString(value)) ~> ChangeValueToString",
						"DistinctRows derive(Language_Id = 1) ~> addLanguageID",
						"excludeValue sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     partitionBy('hash', 1),",
						"     preCommands: [],",
						"     postCommands: []) ~> saveSilverMovie",
						"ChangeValueToString sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     partitionBy('hash', 1),",
						"     preCommands: [],",
						"     postCommands: []) ~> saveBronzeMovie"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/QuarantinedBronzeToSilver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SilverUpdate",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SilverUpdate",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"IngestBronzeMovie": {},
									"saveSilverMovie": {},
									"saveBronzeMovie": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SilverUpdate')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RawToBronzeToSilver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Raw_To_Bronze",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Raw_To_Bronze",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"IngestRawMovie": {},
									"SaveToBronze": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Bronze_To_Silver",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Raw_To_Bronze",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Bronze_To_Silver",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ingestBronze": {},
									"saveSilverGenres": {},
									"saveSilverMovie": {},
									"saveSilverLanguage": {},
									"saveBronzeMoive": {},
									"saveSilverJunction": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-30T09:09:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Raw_To_Bronze')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/movies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RawToBronzeToSilver",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "RawToBronzeToSilver",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "QuarantinedBronzeToSilver",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "RawToBronzeToSilver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "QuarantinedBronzeToSilver",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/RawToBronzeToSilver')]",
				"[concat(variables('factoryId'), '/pipelines/QuarantinedBronzeToSilver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "OLTPToDW",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "OLTPToDW",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inputDate": {
									"value": "@pipeline().parameters.inputDate",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "movies",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "movies",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"inputDate": {
						"type": "string",
						"defaultValue": "2022-09-01T13:45:30"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/movies')]"
			]
		}
	]
}