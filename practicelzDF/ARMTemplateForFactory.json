{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "practicelzDF"
		},
		"MovieBlobStorage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'MovieBlobStorage'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/QuarantinedBronzeToSilver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SilverUpdate",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SilverUpdate",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"IngestBronzeMovie": {},
									"saveSilverMovie": {},
									"saveBronzeMovie": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SilverUpdate')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RawToBronzeToSilver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Raw_To_Bronze",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Raw_To_Bronze",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"InjestRawMovie": {},
									"SaveToBronze": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Bronze_To_Silver",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Raw_To_Bronze",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Bronze_To_Silver",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ingestBronze": {},
									"saveSilverGenres": {},
									"saveSilverMovie": {},
									"saveSilverLanguage": {},
									"saveBronzeMoive": {},
									"saveSilverJunction": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-30T09:09:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Raw_To_Bronze')]",
				"[concat(variables('factoryId'), '/dataflows/Bronze_To_Silver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/movies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RawToBronzeToSilver",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "RawToBronzeToSilver",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "QuarantinedBronzeToSilver",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "RawToBronzeToSilver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "QuarantinedBronzeToSilver",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/RawToBronzeToSilver')]",
				"[concat(variables('factoryId'), '/pipelines/QuarantinedBronzeToSilver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Genres_silver')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MovieBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Movie"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "result/silver/Genres",
						"fileSystem": "etloutput"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MovieBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Language_silver')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MovieBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Movie"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "result/silver/Language",
						"fileSystem": "etloutput"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MovieBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Movie_Bronze')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MovieBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Movie"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "part-00000-f778fd1c-36d4-46dc-824a-7f3eb5f02bc6-c000.snappy.parquet",
						"folderPath": "result/bronze",
						"fileSystem": "etloutput"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MovieBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Movie_json')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MovieBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "movie.json",
						"container": "sample"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"movie": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"Id": {
										"type": "integer"
									},
									"Title": {
										"type": "string"
									},
									"Overview": {
										"type": "string"
									},
									"Tagline": {
										"type": "string"
									},
									"Budget": {
										"type": "number"
									},
									"Revenue": {
										"type": "number"
									},
									"ImdbUrl": {
										"type": "string"
									},
									"TmdbUrl": {
										"type": "string"
									},
									"PosterUrl": {
										"type": "string"
									},
									"BackdropUrl": {
										"type": "string"
									},
									"OriginalLanguage": {
										"type": "string"
									},
									"ReleaseDate": {
										"type": "string"
									},
									"RunTime": {
										"type": "integer"
									},
									"Price": {
										"type": "number"
									},
									"CreatedDate": {
										"type": "string"
									},
									"UpdatedDate": {
										"type": "null"
									},
									"UpdatedBy": {
										"type": "null"
									},
									"CreatedBy": {
										"type": "null"
									},
									"genres": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"name": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MovieBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Movie_silver')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MovieBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Movie"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "result/silver/Movie",
						"fileSystem": "etloutput"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MovieBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/movie_genre_junction_silver')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MovieBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Movie"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "result/silver/junction",
						"container": "etloutput"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MovieBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MovieBlobStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('MovieBlobStorage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Bronze_To_Silver')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Movie_Bronze",
								"type": "DatasetReference"
							},
							"name": "ingestBronze"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Genres_silver",
								"type": "DatasetReference"
							},
							"name": "saveSilverGenres"
						},
						{
							"dataset": {
								"referenceName": "Movie_silver",
								"type": "DatasetReference"
							},
							"name": "saveSilverMovie"
						},
						{
							"dataset": {
								"referenceName": "Language_silver",
								"type": "DatasetReference"
							},
							"name": "saveSilverLanguage"
						},
						{
							"dataset": {
								"referenceName": "Movie_Bronze",
								"type": "DatasetReference"
							},
							"name": "saveBronzeMoive",
							"description": "save Bronze table for clean movie dataset (loaded)"
						},
						{
							"dataset": {
								"referenceName": "movie_genre_junction_silver",
								"type": "DatasetReference"
							},
							"name": "saveSilverJunction"
						}
					],
					"transformations": [
						{
							"name": "bronzeDF",
							"description": "SelectValueColumn"
						},
						{
							"name": "bronzeAgumentedDFMovie",
							"description": "Creating/updating the columns 'value, Id, Budget, Revenue, RunTime, Price, Title, Overview, Tagline, Imdburl, TmdbUrl, PosterUrl, BackdropUrl, ReleaseDate, p_CreatedDate, UpdatedDate, UpdatedBy, CreatedBy, Genres, Language_Id'.\n\nUpdating the minimum of Budget to 100,000"
						},
						{
							"name": "parseGenres"
						},
						{
							"name": "DistinctRowGenres"
						},
						{
							"name": "filterNew"
						},
						{
							"name": "split"
						},
						{
							"name": "excludeValue"
						},
						{
							"name": "selectLanguage"
						},
						{
							"name": "selectGenres"
						},
						{
							"name": "createKey"
						},
						{
							"name": "DistinctRowLanguage"
						},
						{
							"name": "litStatusLoaded"
						},
						{
							"name": "DistinctRowMovie"
						},
						{
							"name": "litStatusQuarantined"
						},
						{
							"name": "DistinctRowMovieQ"
						},
						{
							"name": "selectValueStatus"
						},
						{
							"name": "join1"
						},
						{
							"name": "selectBronzeColumn"
						},
						{
							"name": "union1"
						},
						{
							"name": "select1"
						},
						{
							"name": "movieGenreID"
						}
					],
					"scriptLines": [
						"source(output(",
						"          value as (BackdropUrl as string, Budget as double, CreatedBy as string, CreatedDate as string, Id as short, ImdbUrl as string, OriginalLanguage as string, Overview as string, PosterUrl as string, Price as double, ReleaseDate as string, Revenue as double, RunTime as short, Tagline as string, Title as string, TmdbUrl as string, UpdatedBy as string, UpdatedDate as string, genres as (id as short, name as string)[]),",
						"          datasource as string,",
						"          ingesttime as timestamp,",
						"          status as string,",
						"          ingestdate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> ingestBronze",
						"filterNew select(mapColumn(",
						"          value",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> bronzeDF",
						"select1 derive(value = value,",
						"          Budget = case(Budget < 100000, 100000, toInteger(value.Budget)),",
						"          ReleaseDate = toDate(ReleaseDate),",
						"          CreatedDate = toDate(CreatedDate),",
						"          Language_Id = 1) ~> bronzeAgumentedDFMovie",
						"selectGenres select(mapColumn(",
						"          Id = genres[1].id,",
						"          Name = genres[1].name",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> parseGenres",
						"parseGenres aggregate(groupBy(Id),",
						"     each(match(name!=\"Id\"), $$ = first($$))) ~> DistinctRowGenres",
						"ingestBronze filter(status == \"new\") ~> filterNew",
						"bronzeAgumentedDFMovie split(RunTime >= 0,",
						"     disjoint: false) ~> split@(silverMovieClean, silverMovieQuarantined)",
						"DistinctRowMovie select(mapColumn(",
						"          Id,",
						"          Budget,",
						"          Revenue,",
						"          RunTime,",
						"          Price,",
						"          Title,",
						"          Overview,",
						"          Tagline,",
						"          ImdbUrl,",
						"          TmdbUrl,",
						"          PosterUrl,",
						"          BackdropUrl,",
						"          ReleaseDate,",
						"          p_CreatedDate = CreatedDate,",
						"          UpdatedDate,",
						"          UpdatedBy,",
						"          CreatedBy,",
						"          Genres_Id = genres[1].id,",
						"          Language_Id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> excludeValue",
						"bronzeDF select(mapColumn(",
						"          Language = value.OriginalLanguage",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectLanguage",
						"bronzeDF select(mapColumn(",
						"          genres = value.genres",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectGenres",
						"selectLanguage window(over(Language),",
						"     asc(Language, true),",
						"     Id = rank()) ~> createKey",
						"createKey aggregate(groupBy(Id),",
						"     each(match(name!=\"Id\"), $$ = first($$))) ~> DistinctRowLanguage",
						"DistinctRowMovie derive(status = \"loaded\") ~> litStatusLoaded",
						"split@silverMovieClean aggregate(groupBy(Id),",
						"     each(match(name!=\"Id\"), $$ = min($$))) ~> DistinctRowMovie",
						"DistinctRowMovieQ derive(status = \"quarantined\") ~> litStatusQuarantined",
						"split@silverMovieQuarantined aggregate(groupBy(Id),",
						"     each(match(name!=\"Id\"), $$ = first($$))) ~> DistinctRowMovieQ",
						"union1 select(mapColumn(",
						"          value,",
						"          status",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectValueStatus",
						"selectValueStatus, ingestBronze join(selectValueStatus@value.Id == ingestBronze@value.Id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          value = selectValueStatus@value,",
						"          datasource,",
						"          ingesttime,",
						"          status = selectValueStatus@status,",
						"          ingestdate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectBronzeColumn",
						"litStatusLoaded, litStatusQuarantined union(byName: false)~> union1",
						"bronzeDF select(mapColumn(",
						"          value,",
						"          BackdropUrl = value.BackdropUrl,",
						"          Budget = value.Budget,",
						"          CreatedBy = value.CreatedBy,",
						"          CreatedDate = value.CreatedDate,",
						"          Id = value.Id,",
						"          ImdbUrl = value.ImdbUrl,",
						"          Overview = value.Overview,",
						"          PosterUrl = value.PosterUrl,",
						"          Price = value.Price,",
						"          ReleaseDate = value.ReleaseDate,",
						"          Revenue = value.Revenue,",
						"          RunTime = value.RunTime,",
						"          Tagline = value.Tagline,",
						"          Title = value.Title,",
						"          TmdbUrl = value.TmdbUrl,",
						"          UpdatedBy = value.UpdatedBy,",
						"          UpdatedDate = value.UpdatedDate,",
						"          genres = value.genres",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"DistinctRowMovie select(mapColumn(",
						"          Movie_Id = value.Id,",
						"          Genres_Id = genres[1].id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> movieGenreID",
						"DistinctRowGenres sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     partitionBy('hash', 1),",
						"     preCommands: ['rm -f /result/silver/Genres/*'],",
						"     postCommands: []) ~> saveSilverGenres",
						"excludeValue sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     partitionBy('hash', 1),",
						"     preCommands: ['rm -f /result/silver/Movie/*'],",
						"     postCommands: []) ~> saveSilverMovie",
						"DistinctRowLanguage sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     partitionBy('hash', 1),",
						"     preCommands: ['rm -f /result/silver/Language/*'],",
						"     postCommands: []) ~> saveSilverLanguage",
						"selectBronzeColumn sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     format: 'parquet',",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 3,",
						"     partitionBy('hash', 1),",
						"     preCommands: [],",
						"     postCommands: []) ~> saveBronzeMoive",
						"movieGenreID sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> saveSilverJunction"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Movie_Bronze')]",
				"[concat(variables('factoryId'), '/datasets/Genres_silver')]",
				"[concat(variables('factoryId'), '/datasets/Movie_silver')]",
				"[concat(variables('factoryId'), '/datasets/Language_silver')]",
				"[concat(variables('factoryId'), '/datasets/movie_genre_junction_silver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Raw_To_Bronze')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Movie_json",
								"type": "DatasetReference"
							},
							"name": "InjestRawMovie"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Movie_Bronze",
								"type": "DatasetReference"
							},
							"name": "SaveToBronze",
							"rejectedDataLinkedService": {
								"referenceName": "MovieBlobStorage",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "flattenValues"
						},
						{
							"name": "MetaData"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movie as (Id as integer, Title as string, Overview as string, Tagline as string, Budget as double, Revenue as double, ImdbUrl as string, TmdbUrl as string, PosterUrl as string, BackdropUrl as string, OriginalLanguage as string, ReleaseDate as string, RunTime as integer, Price as double, CreatedDate as string, UpdatedDate as string, UpdatedBy as string, CreatedBy as string, genres as (id as integer, name as string)[])[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> InjestRawMovie",
						"InjestRawMovie foldDown(unroll(movie, movie),",
						"     mapColumn(",
						"          value = movie",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenValues",
						"flattenValues derive(value = value,",
						"          datasource = \"antraMovie\",",
						"          ingesttime = currentTimestamp(),",
						"          status = \"New\",",
						"          ingestdate = currentDate()) ~> MetaData",
						"MetaData sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     format: 'parquet',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     partitionBy('hash', 1)) ~> SaveToBronze"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Movie_json')]",
				"[concat(variables('factoryId'), '/datasets/Movie_Bronze')]",
				"[concat(variables('factoryId'), '/linkedServices/MovieBlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SilverUpdate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Movie_Bronze",
								"type": "DatasetReference"
							},
							"name": "IngestBronzeMovie"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Movie_silver",
								"type": "DatasetReference"
							},
							"name": "saveSilverMovie"
						},
						{
							"dataset": {
								"referenceName": "Movie_Bronze",
								"type": "DatasetReference"
							},
							"name": "saveBronzeMovie"
						}
					],
					"transformations": [
						{
							"name": "filterQuarantined"
						},
						{
							"name": "selectValue"
						},
						{
							"name": "absRunTime"
						},
						{
							"name": "excludeValue"
						},
						{
							"name": "DistinctRows"
						},
						{
							"name": "litStatusLoaded"
						},
						{
							"name": "selectValueStatus"
						},
						{
							"name": "join1"
						},
						{
							"name": "selectBronzeColumn"
						},
						{
							"name": "ChangeValueToString"
						},
						{
							"name": "addLanguageID"
						}
					],
					"scriptLines": [
						"source(output(",
						"          value as (BackdropUrl as string, Budget as double, CreatedBy as string, CreatedDate as string, Id as short, ImdbUrl as string, OriginalLanguage as string, Overview as string, PosterUrl as string, Price as double, ReleaseDate as string, Revenue as double, RunTime as short, Tagline as string, Title as string, TmdbUrl as string, UpdatedBy as string, UpdatedDate as string, genres as (id as short, name as string)[]),",
						"          datasource as string,",
						"          ingesttime as timestamp,",
						"          status as string,",
						"          ingestdate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> IngestBronzeMovie",
						"IngestBronzeMovie filter(status == \"quarantined\") ~> filterQuarantined",
						"filterQuarantined select(mapColumn(",
						"          value,",
						"          Id = value.Id,",
						"          Budget = value.Budget,",
						"          Revenue = value.Revenue,",
						"          RunTime = value.RunTime,",
						"          Price = value.Price,",
						"          Title = value.Title,",
						"          Overview = value.Overview,",
						"          Tagline = value.Tagline,",
						"          ImdbUrl = value.ImdbUrl,",
						"          TmdbUrl = value.TmdbUrl,",
						"          PosterUrl = value.PosterUrl,",
						"          BackdropUrl = value.BackdropUrl,",
						"          ReleaseDate = value.ReleaseDate,",
						"          CreatedDate = value.CreatedDate,",
						"          UpdatedDate = value.UpdatedDate,",
						"          UpdatedBy = value.UpdatedBy,",
						"          CreatedBy = value.CreatedBy,",
						"          genres = value.genres,",
						"          OriginalLanguage = value.OriginalLanguage",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectValue",
						"selectValue derive(RunTime = abs(RunTime)) ~> absRunTime",
						"addLanguageID select(mapColumn(",
						"          Id,",
						"          Budget,",
						"          Revenue,",
						"          RunTime,",
						"          Price,",
						"          Title,",
						"          Overview,",
						"          Tagline,",
						"          ImdbUrl,",
						"          TmdbUrl,",
						"          PosterUrl,",
						"          BackdropUrl,",
						"          ReleaseDate,",
						"          CreatedDate,",
						"          UpdatedDate,",
						"          UpdatedBy,",
						"          CreatedBy,",
						"          Genres_Id = genres[1].id,",
						"          Language_Id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> excludeValue",
						"absRunTime aggregate(groupBy(Id),",
						"     each(match(name!=\"Id\"), $$ = first($$))) ~> DistinctRows",
						"DistinctRows derive(status = \"loaded\") ~> litStatusLoaded",
						"litStatusLoaded select(mapColumn(",
						"          value,",
						"          status",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectValueStatus",
						"selectValueStatus, IngestBronzeMovie join(selectValueStatus@value.Id == IngestBronzeMovie@value.Id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          value = selectValueStatus@value,",
						"          datasource,",
						"          ingesttime,",
						"          ingestdate,",
						"          status = selectValueStatus@status",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectBronzeColumn",
						"selectBronzeColumn derive(value = toString(value)) ~> ChangeValueToString",
						"DistinctRows derive(Language_Id = 1) ~> addLanguageID",
						"excludeValue sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     partitionBy('hash', 1),",
						"     preCommands: [],",
						"     postCommands: []) ~> saveSilverMovie",
						"ChangeValueToString sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     partitionBy('hash', 1),",
						"     preCommands: [],",
						"     postCommands: []) ~> saveBronzeMovie"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Movie_Bronze')]",
				"[concat(variables('factoryId'), '/datasets/Movie_silver')]"
			]
		}
	]
}